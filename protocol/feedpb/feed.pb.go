// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: feedpb/feed.proto

package feedpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FeedInfo_Type int32

const (
	FeedInfo_Unspecified FeedInfo_Type = 0
	FeedInfo_DAO         FeedInfo_Type = 1
	FeedInfo_Proposal    FeedInfo_Type = 2
	FeedInfo_Delegate    FeedInfo_Type = 3
)

// Enum value maps for FeedInfo_Type.
var (
	FeedInfo_Type_name = map[int32]string{
		0: "Unspecified",
		1: "DAO",
		2: "Proposal",
		3: "Delegate",
	}
	FeedInfo_Type_value = map[string]int32{
		"Unspecified": 0,
		"DAO":         1,
		"Proposal":    2,
		"Delegate":    3,
	}
)

func (x FeedInfo_Type) Enum() *FeedInfo_Type {
	p := new(FeedInfo_Type)
	*p = x
	return p
}

func (x FeedInfo_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeedInfo_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_feedpb_feed_proto_enumTypes[0].Descriptor()
}

func (FeedInfo_Type) Type() protoreflect.EnumType {
	return &file_feedpb_feed_proto_enumTypes[0]
}

func (x FeedInfo_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeedInfo_Type.Descriptor instead.
func (FeedInfo_Type) EnumDescriptor() ([]byte, []int) {
	return file_feedpb_feed_proto_rawDescGZIP(), []int{0, 0}
}

type FeedTimelineItem_TimelineAction int32

const (
	FeedTimelineItem_Unspecified                 FeedTimelineItem_TimelineAction = 0
	FeedTimelineItem_DaoCreated                  FeedTimelineItem_TimelineAction = 1
	FeedTimelineItem_DaoUpdated                  FeedTimelineItem_TimelineAction = 2
	FeedTimelineItem_ProposalCreated             FeedTimelineItem_TimelineAction = 3
	FeedTimelineItem_ProposalUpdated             FeedTimelineItem_TimelineAction = 4
	FeedTimelineItem_ProposalVotingStartsSoon    FeedTimelineItem_TimelineAction = 5
	FeedTimelineItem_ProposalVotingStarted       FeedTimelineItem_TimelineAction = 6
	FeedTimelineItem_ProposalVotingQuorumReached FeedTimelineItem_TimelineAction = 7
	FeedTimelineItem_ProposalVotingEnded         FeedTimelineItem_TimelineAction = 8
	FeedTimelineItem_ProposalVotingEndsSoon      FeedTimelineItem_TimelineAction = 9
	FeedTimelineItem_DelegateCreateProposal      FeedTimelineItem_TimelineAction = 10
	FeedTimelineItem_DelegateVotingVoted         FeedTimelineItem_TimelineAction = 11
	FeedTimelineItem_DelegateVotingSkipVote      FeedTimelineItem_TimelineAction = 12
)

// Enum value maps for FeedTimelineItem_TimelineAction.
var (
	FeedTimelineItem_TimelineAction_name = map[int32]string{
		0:  "Unspecified",
		1:  "DaoCreated",
		2:  "DaoUpdated",
		3:  "ProposalCreated",
		4:  "ProposalUpdated",
		5:  "ProposalVotingStartsSoon",
		6:  "ProposalVotingStarted",
		7:  "ProposalVotingQuorumReached",
		8:  "ProposalVotingEnded",
		9:  "ProposalVotingEndsSoon",
		10: "DelegateCreateProposal",
		11: "DelegateVotingVoted",
		12: "DelegateVotingSkipVote",
	}
	FeedTimelineItem_TimelineAction_value = map[string]int32{
		"Unspecified":                 0,
		"DaoCreated":                  1,
		"DaoUpdated":                  2,
		"ProposalCreated":             3,
		"ProposalUpdated":             4,
		"ProposalVotingStartsSoon":    5,
		"ProposalVotingStarted":       6,
		"ProposalVotingQuorumReached": 7,
		"ProposalVotingEnded":         8,
		"ProposalVotingEndsSoon":      9,
		"DelegateCreateProposal":      10,
		"DelegateVotingVoted":         11,
		"DelegateVotingSkipVote":      12,
	}
)

func (x FeedTimelineItem_TimelineAction) Enum() *FeedTimelineItem_TimelineAction {
	p := new(FeedTimelineItem_TimelineAction)
	*p = x
	return p
}

func (x FeedTimelineItem_TimelineAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeedTimelineItem_TimelineAction) Descriptor() protoreflect.EnumDescriptor {
	return file_feedpb_feed_proto_enumTypes[1].Descriptor()
}

func (FeedTimelineItem_TimelineAction) Type() protoreflect.EnumType {
	return &file_feedpb_feed_proto_enumTypes[1]
}

func (x FeedTimelineItem_TimelineAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeedTimelineItem_TimelineAction.Descriptor instead.
func (FeedTimelineItem_TimelineAction) EnumDescriptor() ([]byte, []int) {
	return file_feedpb_feed_proto_rawDescGZIP(), []int{1, 0}
}

type FeedInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DaoId         string                 `protobuf:"bytes,4,opt,name=dao_id,json=daoId,proto3" json:"dao_id,omitempty"`
	ProposalId    string                 `protobuf:"bytes,5,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	DiscussionId  string                 `protobuf:"bytes,6,opt,name=discussion_id,json=discussionId,proto3" json:"discussion_id,omitempty"`
	Action        string                 `protobuf:"bytes,7,opt,name=action,proto3" json:"action,omitempty"`
	Snapshot      *anypb.Any             `protobuf:"bytes,8,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	Type          FeedInfo_Type          `protobuf:"varint,9,opt,name=type,proto3,enum=feedpb.FeedInfo_Type" json:"type,omitempty"`
	Timeline      []*FeedTimelineItem    `protobuf:"bytes,10,rep,name=timeline,proto3" json:"timeline,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FeedInfo) Reset() {
	*x = FeedInfo{}
	mi := &file_feedpb_feed_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeedInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedInfo) ProtoMessage() {}

func (x *FeedInfo) ProtoReflect() protoreflect.Message {
	mi := &file_feedpb_feed_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedInfo.ProtoReflect.Descriptor instead.
func (*FeedInfo) Descriptor() ([]byte, []int) {
	return file_feedpb_feed_proto_rawDescGZIP(), []int{0}
}

func (x *FeedInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FeedInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *FeedInfo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *FeedInfo) GetDaoId() string {
	if x != nil {
		return x.DaoId
	}
	return ""
}

func (x *FeedInfo) GetProposalId() string {
	if x != nil {
		return x.ProposalId
	}
	return ""
}

func (x *FeedInfo) GetDiscussionId() string {
	if x != nil {
		return x.DiscussionId
	}
	return ""
}

func (x *FeedInfo) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *FeedInfo) GetSnapshot() *anypb.Any {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

func (x *FeedInfo) GetType() FeedInfo_Type {
	if x != nil {
		return x.Type
	}
	return FeedInfo_Unspecified
}

func (x *FeedInfo) GetTimeline() []*FeedTimelineItem {
	if x != nil {
		return x.Timeline
	}
	return nil
}

type FeedTimelineItem struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	CreatedAt     *timestamppb.Timestamp          `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Action        FeedTimelineItem_TimelineAction `protobuf:"varint,2,opt,name=action,proto3,enum=feedpb.FeedTimelineItem_TimelineAction" json:"action,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FeedTimelineItem) Reset() {
	*x = FeedTimelineItem{}
	mi := &file_feedpb_feed_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeedTimelineItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedTimelineItem) ProtoMessage() {}

func (x *FeedTimelineItem) ProtoReflect() protoreflect.Message {
	mi := &file_feedpb_feed_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedTimelineItem.ProtoReflect.Descriptor instead.
func (*FeedTimelineItem) Descriptor() ([]byte, []int) {
	return file_feedpb_feed_proto_rawDescGZIP(), []int{1}
}

func (x *FeedTimelineItem) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *FeedTimelineItem) GetAction() FeedTimelineItem_TimelineAction {
	if x != nil {
		return x.Action
	}
	return FeedTimelineItem_Unspecified
}

type FeedByFilterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in feedpb/feed.proto.
	DaoId         *string  `protobuf:"bytes,1,opt,name=dao_id,json=daoId,proto3,oneof" json:"dao_id,omitempty"`
	Types         []string `protobuf:"bytes,2,rep,name=types,proto3" json:"types,omitempty"`
	Actions       []string `protobuf:"bytes,3,rep,name=actions,proto3" json:"actions,omitempty"`
	Limit         *uint64  `protobuf:"varint,4,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Offset        *uint64  `protobuf:"varint,5,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
	DaoIds        []string `protobuf:"bytes,6,rep,name=dao_ids,json=daoIds,proto3" json:"dao_ids,omitempty"`
	IsActive      *bool    `protobuf:"varint,7,opt,name=is_active,json=isActive,proto3,oneof" json:"is_active,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FeedByFilterRequest) Reset() {
	*x = FeedByFilterRequest{}
	mi := &file_feedpb_feed_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeedByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedByFilterRequest) ProtoMessage() {}

func (x *FeedByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_feedpb_feed_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedByFilterRequest.ProtoReflect.Descriptor instead.
func (*FeedByFilterRequest) Descriptor() ([]byte, []int) {
	return file_feedpb_feed_proto_rawDescGZIP(), []int{2}
}

// Deprecated: Marked as deprecated in feedpb/feed.proto.
func (x *FeedByFilterRequest) GetDaoId() string {
	if x != nil && x.DaoId != nil {
		return *x.DaoId
	}
	return ""
}

func (x *FeedByFilterRequest) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *FeedByFilterRequest) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *FeedByFilterRequest) GetLimit() uint64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *FeedByFilterRequest) GetOffset() uint64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *FeedByFilterRequest) GetDaoIds() []string {
	if x != nil {
		return x.DaoIds
	}
	return nil
}

func (x *FeedByFilterRequest) GetIsActive() bool {
	if x != nil && x.IsActive != nil {
		return *x.IsActive
	}
	return false
}

type FeedByFilterResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*FeedInfo            `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	TotalCount    uint64                 `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FeedByFilterResponse) Reset() {
	*x = FeedByFilterResponse{}
	mi := &file_feedpb_feed_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeedByFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedByFilterResponse) ProtoMessage() {}

func (x *FeedByFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_feedpb_feed_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedByFilterResponse.ProtoReflect.Descriptor instead.
func (*FeedByFilterResponse) Descriptor() ([]byte, []int) {
	return file_feedpb_feed_proto_rawDescGZIP(), []int{3}
}

func (x *FeedByFilterResponse) GetItems() []*FeedInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *FeedByFilterResponse) GetTotalCount() uint64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

var File_feedpb_feed_proto protoreflect.FileDescriptor

var file_feedpb_feed_proto_rawDesc = string([]byte{
	0x0a, 0x11, 0x66, 0x65, 0x65, 0x64, 0x70, 0x62, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x66, 0x65, 0x65, 0x64, 0x70, 0x62, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd6, 0x03, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x61,
	0x6f, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x6f, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x75,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x30, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x66, 0x65, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x22, 0x3c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x44,
	0x41, 0x4f, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x10, 0x03,
	0x22, 0xdc, 0x03, 0x0a, 0x10, 0x46, 0x65, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x3f, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xcb, 0x02, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x61, 0x6f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x61, 0x6f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x10, 0x04, 0x12,
	0x1c, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x53, 0x6f, 0x6f, 0x6e, 0x10, 0x05, 0x12, 0x19, 0x0a,
	0x15, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x64, 0x65, 0x64,
	0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x56, 0x6f,
	0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x64, 0x73, 0x53, 0x6f, 0x6f, 0x6e, 0x10, 0x09, 0x12, 0x1a,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x74, 0x65,
	0x64, 0x10, 0x0b, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x56,
	0x6f, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x6b, 0x69, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x10, 0x0c, 0x22,
	0x86, 0x02, 0x0a, 0x13, 0x46, 0x65, 0x65, 0x64, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x06, 0x64, 0x61, 0x6f, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x05, 0x64,
	0x61, 0x6f, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x02, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x07, 0x64, 0x61, 0x6f, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x61, 0x6f, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x08, 0x69,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64,
	0x61, 0x6f, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69,
	0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x5f, 0x0a, 0x14, 0x46, 0x65, 0x65, 0x64,
	0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x26, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x50, 0x0a, 0x04, 0x46, 0x65, 0x65,
	0x64, 0x12, 0x48, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x1b, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x42, 0x79,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x66, 0x65, 0x65, 0x64, 0x70, 0x62, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x42, 0x79, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x5a, 0x08, 0x2e,
	0x3b, 0x66, 0x65, 0x65, 0x64, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_feedpb_feed_proto_rawDescOnce sync.Once
	file_feedpb_feed_proto_rawDescData []byte
)

func file_feedpb_feed_proto_rawDescGZIP() []byte {
	file_feedpb_feed_proto_rawDescOnce.Do(func() {
		file_feedpb_feed_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_feedpb_feed_proto_rawDesc), len(file_feedpb_feed_proto_rawDesc)))
	})
	return file_feedpb_feed_proto_rawDescData
}

var file_feedpb_feed_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_feedpb_feed_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_feedpb_feed_proto_goTypes = []any{
	(FeedInfo_Type)(0),                   // 0: feedpb.FeedInfo.Type
	(FeedTimelineItem_TimelineAction)(0), // 1: feedpb.FeedTimelineItem.TimelineAction
	(*FeedInfo)(nil),                     // 2: feedpb.FeedInfo
	(*FeedTimelineItem)(nil),             // 3: feedpb.FeedTimelineItem
	(*FeedByFilterRequest)(nil),          // 4: feedpb.FeedByFilterRequest
	(*FeedByFilterResponse)(nil),         // 5: feedpb.FeedByFilterResponse
	(*timestamppb.Timestamp)(nil),        // 6: google.protobuf.Timestamp
	(*anypb.Any)(nil),                    // 7: google.protobuf.Any
}
var file_feedpb_feed_proto_depIdxs = []int32{
	6, // 0: feedpb.FeedInfo.created_at:type_name -> google.protobuf.Timestamp
	6, // 1: feedpb.FeedInfo.updated_at:type_name -> google.protobuf.Timestamp
	7, // 2: feedpb.FeedInfo.snapshot:type_name -> google.protobuf.Any
	0, // 3: feedpb.FeedInfo.type:type_name -> feedpb.FeedInfo.Type
	3, // 4: feedpb.FeedInfo.timeline:type_name -> feedpb.FeedTimelineItem
	6, // 5: feedpb.FeedTimelineItem.created_at:type_name -> google.protobuf.Timestamp
	1, // 6: feedpb.FeedTimelineItem.action:type_name -> feedpb.FeedTimelineItem.TimelineAction
	2, // 7: feedpb.FeedByFilterResponse.items:type_name -> feedpb.FeedInfo
	4, // 8: feedpb.Feed.GetByFilter:input_type -> feedpb.FeedByFilterRequest
	5, // 9: feedpb.Feed.GetByFilter:output_type -> feedpb.FeedByFilterResponse
	9, // [9:10] is the sub-list for method output_type
	8, // [8:9] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_feedpb_feed_proto_init() }
func file_feedpb_feed_proto_init() {
	if File_feedpb_feed_proto != nil {
		return
	}
	file_feedpb_feed_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_feedpb_feed_proto_rawDesc), len(file_feedpb_feed_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_feedpb_feed_proto_goTypes,
		DependencyIndexes: file_feedpb_feed_proto_depIdxs,
		EnumInfos:         file_feedpb_feed_proto_enumTypes,
		MessageInfos:      file_feedpb_feed_proto_msgTypes,
	}.Build()
	File_feedpb_feed_proto = out.File
	file_feedpb_feed_proto_goTypes = nil
	file_feedpb_feed_proto_depIdxs = nil
}
